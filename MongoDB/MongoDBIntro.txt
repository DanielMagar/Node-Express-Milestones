ðŸ”° What is MongoDB?
   - MongoDB is a NoSQL document database that stores data in JSON-like format called BSON (Binary JSON). 
   - It's schema-less, which means you can store different fields in different documents of the same collection.

ðŸ§± Core Concepts:
    | SQL (Relational DB) | MongoDB (NoSQL)            |
    | ------------------- | -------------------------- |
    | Database            | Database                   |
    | Table               | Collection                 |
    | Row                 | Document                   |
    | Column              | Field                      |
    | SQL Query           | MongoDB Query (JSON-style) |


ðŸ“˜ MongoDB Basics: Crash Course
   ðŸ”¹ 1. Databases and Collections
         MongoDB has:

        - Databases (use myDatabase)

        - Inside databases are collections (like tables) in short: Collections are tables 

        - Inside collections are documents (like rows) - documents are rows

ðŸ”¹   2. Create / Switch Database
         - use myApp  // If it doesnâ€™t exist, MongoDB will create it when you insert the first document.

ðŸ”¹ 3. Insert Documents
         - db.users.insertOne({ name: "Daniel", age: 25 })
            db.users.insertMany([
            { name: "Alice", age: 30 },
            { name: "Bob", age: 27 }
            ])

ðŸ”¹ 4. Find Documents

         - db.users.find()             // Show all
         - db.users.findOne()          // Show one
         - db.users.find({ age: 25 })  // Filter

   Pretty-print: 
         - db.users.find().pretty()
ðŸ”¹ 5. Update Documents:
         db.users.updateOne(
               { name: "Daniel" },
               { $set: { age: 26 } }
            )

         db.users.updateMany(
               { age: { $lt: 30 } },
               { $set: { status: "young" } }
         )
ðŸ”¹ 6. Delete Documents: 
      
        - db.users.deleteOne({ name: "Alice" })
        - db.users.deleteMany({ age: { $lt: 25 } })

ðŸ”¹ 7. Useful Queries- 
   
         db.users.find().sort({ age: 1 })       // ascending
         db.users.find().limit(2)              // limit results
         db.users.find({}, { name: 1 })        // projection (only name)

ðŸ§  Pro Tip: MongoDB is Schema-less
      You can store different structures inside the same collection:
       - db.users.insertOne({ name: "Random", skills: ["React", "Node"], isAdmin: true })

ðŸ§¹Clean and Simple CRUD :

| Action     | Command example |
| ---------- | --------------- |
| **C**reate | `insertOne()`   |
| **R**ead   | `find()`        |
| **U**pdate | `updateOne()`   |
| **D**elete | `deleteOne()`   |







 