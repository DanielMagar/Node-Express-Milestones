ðŸ§  What is a Promise?
    - A Promise is an object that represents the eventual result of an asynchronous operation.

    - It can be in one of three states:

    - Pending â€“ not yet completed

    - Resolved (fulfilled) â€“ successful result

    - Rejected â€“ failed with an error


ðŸ”— What is Promise Chaining?
    - Promise chaining means linking multiple .then() calls, where each .then() receives the result from the previous one and can return a new Promise or value.

    - This allows you to run asynchronous steps one after another, in a clear sequence â€” without nesting callbacks.

ðŸ§± Basic Structure:
    doSomething()
       .then(result1 => {
            // do something with result1
            return doSomethingElse(result1);
        })
        .then(result2 => {
            // do something with result2
            return finalStep(result2);
        })
        .catch(err => {
            console.error("Something went wrong:", err);
        });



ðŸ’¡ Why Use Promises?
   - No more deeply nested callbacks

   - You can chain .then() calls for step-by-step processing

   - Errors are handled with .catch() at the end

   - Makes async flows more readable

   âœ… Summary

    | Benefit                  | Why it matters            |
    | ------------------------ | ------------------------- |
    | No callback hell         | Flat, readable code       |
    | Error handling           | `.catch()` for all errors |
    | Chaining supported       | Easy to build workflows   |
    | Works with `async/await` | Even more readable syntax |
